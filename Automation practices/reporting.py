import json
import locale
import sys
import os
import email.message
import mimetypes
import smtplib
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def load_data(filename):
    with open(filename) as json_file:
        data = json.load(json_file)
    return data

def format_car(car):
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    yearly_sales = {}
    popular_year = [1970, 0]
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # add max sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item
        # add most popular car_year
        yearly_sales[item["car"]["car_year"]] = yearly_sales.get(item["car"]["car_year"], 0) + item["total_sales"]
    for year, sales in yearly_sales.items():
        if sales > popular_year[1]:
            popular_year[0] = year
            popular_year[1] = sales
    summary = [
        "The {} generate the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales".format(popular_year[0], popular_year[1])
    ]
    return summary

def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data

def email_generate(sender, recipient, subject, body, attachment_path):
    """Creates an email with an attachement."""
    # Basic Email formatting
    message = email.message.EmailMessage()
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject
    message.set_content(body)

    # Process the attachment and add it to the email
    attachment_filename = os.path.basename(attachment_path)
    mime_type, _ = mimetypes.guess_type(attachment_path)

    with open(attachment_path, 'rb') as ap:
        message.add_attachment(ap.read(),
                            maintype=mime_type,
                            subtype=mime_subtype,
                            filename=attachment_filename)

    return message

def email_send(message):
    """Sends the message to the configured SMTP server."""
    mail_server = smtplib.SMTP('localhost')
    mail_server.send_message(message)
    mail_server.quit()

def report_generate(filename, title, additional_info, table_data):
    styles = getSampleStyleSheet()
    report = SimpleDocTemplate(filename)
    report_title = Paragraph(title, styles["h1"])
    report_info = Paragraph(additional_info, styles["BodyText"])
    table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                    ('ALIGN', (0,0), (-1,-1), 'CENTER')]
    report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
    empty_line = Spacer(1,20)
    report.build([report_title, empty_line, report_info, empty_line, report_table])

def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    sum_text = summary[0] + "<br/>" + summary[1] + "<br/>" + summary[2]
    cars_table = cars_dict_to_table(data)
    report_generate("/tmp/cars.pdf", "Sales summary for last month", sum_text, cars_table)
    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = summary[0] + "\n" + summary[1] + "\n" + summary[2]
    message = email_generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    email_send(message)

if __name__ == "__main__":
    main(sys.argv)